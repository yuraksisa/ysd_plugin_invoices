<%= partial 'select_customer.js'.to_sym %>
require(["jquery", "YSDEntityManagement", 'YSDEntityManagementComplementHooks', 'ysdtemplate', 'YSDGui',
	     "jquery.ui", "YSDjson2", 'bootstrap', 'jquery.ui.datepicker-es','datejs',
	     'jquery.formparams', 'jquery.validate', 'jquery.ui.datepicker.validation'], 
         function($, EntityManagement, EntityManagementComplementHooks, tmpl, YSDGui) {
    
  var invoicesHook = {
    

    paymentMethodDescription : {
       'cash':'<%= t.booking_payment_method.cash%>',
       'bank_transfer':'<%= t.booking_payment_method.bank_transfer%>',
       'credit_card':'<%= t.booking_payment_method.credit_card%>',
       'redsys256':'<%= t.booking_payment_method.redsys256%>',
       'santander':'<%= t.booking_payment_method.santander%>',
       'pi4b':'<%= t.booking_payment_method.pi4b%>',
       'cecabank':'<%= t.booking_payment_method.cecabank%>',
       'paypal_standard':'<%= t.booking_payment_method.paypal_standard%>',                                      
    },     
    
    chargeStatusDescription : {
       'pending': '<%= t.charge_status.pending %>',
       'processing': '<%= t.charge_status.processing %>',
       'done': '<%= t.charge_status.done %>',
       'denied': '<%= t.charge_status.denied %>',
       'refunded': '<%= t.charge_status.refunded%>'
    },

    paymentStatusDescription : {
       'pending': '<%= t.charge_status.pending %>',
       'processing': '<%= t.charge_status.processing %>',
       'done': '<%= t.charge_status.refunded %>',
       'denied': '<%= t.charge_status.denied %>',
       'refunded': '<%= t.charge_status.refunded%>'
    },

    chargeStatusClass : function(entity) {
      var className = null;
      switch (entity.status) {
        case 'pending' :
          className = 'pending-status';
          break;
        case 'processing':
          className = 'doing-status';
          break; 
        case 'done':
          className = 'done-status';
          break;
        case 'denied':
          className = 'error-status';
          break;
        case 'refunded':
          className = 'error-status';
          break;          
      }
      return className;
    },       

    paymentStatusClass : function(entity) {
      var className = null;
      switch (entity.status) {
        case 'pending' :
          className = 'pending-status';
          break;
        case 'processing':
          className = 'doing-status';
          break; 
        case 'done':
          className = 'error-status';
          break;
        case 'denied':
          className = 'error-status';
          break;
        case 'refunded':
          className = 'error-status';
          break;          
      }
      return className;
    },  

    entityKey : function(entity) {
      return entity.id;
    },

    onEdit : function(entity) {
      this.configForm(entity);
      invoicesManagement.model.invoice_id = entity.id;
      // Edit invoice item
      $('.edit-invoice-item').bind('click', function(){
        invoicesManagement.controller.editInvoiceLineButtonClick(entity, $(this).attr('data-line-idx'));
      });
      // Embed activity newsfeed
      invoicesManagement.view.update('newsfeed_reload');
      if (entity.invoice_status == 'invoice') {
        $('.delete-entity-button').hide();
      }
    },
  
    onNew : function() {
      //$('#date').focus();
      this.configForm(null);
    },

    configForm: function(entity) {
      
      invoicesManagement.model.invoice = entity;

      // Setup date
      var locale = $.datepicker.regional["<%=session[:locale] || 'es'%>"];             
      $.datepicker.setDefaults($.datepicker.regional["<%=session[:locale] || 'es'%>"]);
      $('#date').datepicker({numberOfMonths:1, 
      	                     dateFormat: 'dd/mm/yy', 
      	                     maxDate: new Date(), defaultDate: ''}, "<%=session[:locale] || 'es'%>" );
      if (entity && entity.date) {
         $('#date').datepicker('setDate', entity.date);
      }
      else {
    	   $('#date').datepicker('setDate', new Date());
      }    

      // Expected payment date
      $('#expected_payment_date').datepicker({numberOfMonths:1, 
                             dateFormat: 'dd/mm/yy', 
                             minDate: new Date(), defaultDate: ''}, "<%=session[:locale] || 'es'%>" );
      if (entity && entity.expected_payment_date) {
         $('#expected_payment_date').datepicker('setDate', entity.expected_payment_date);
      }

      // New customer
      $('#select_customer_button').bind('click', function() {
        invoicesManagement.controller.selectCustomerButtonClick();
      });

      // New invoice item
      $('#new_invoice_line_button').bind('click', function(){
      	invoicesManagement.controller.newInvoiceLineButtonClick(entity);
      });

      // Generate bill
      $('#generate_bill_btn').bind('click', function(){
        invoicesManagement.controller.generateBillButtonClick();
      });

      // Send invoice
      $('#send_invoice_btn').bind('click', function(){
        invoicesManagement.controller.sendInvoiceButtonClick();
      });

      // Set up new charge button click
      $('#new_charge').bind('click', function(){
        invoicesManagement.controller.prepareFormNewCharge(entity);       
      });

      // Remove a charge
      $('.remove-invoice-charges').bind('click', function() {
        if (confirm('<%=t.invoices.form.charges.confirm_remove_charge%>')){
          var invoiceId = $(this).attr('data-customer-invoice-id');
          var chargeId = $(this).attr('data-charge-id');
          invoicesManagement.model.remove_charge(invoiceId, chargeId);
        }      
      });      

      invoicesManagement.view.setupValidation();

    },

    adaptFormData: function(data) {      
      delete data.customer;
      if ($('select[name=serie]').val()=='')Â {
        data.serie = null;
      }
      return data;
    }
        

  };

  var invoicesManagement = {

    model: {
        invoice: null,
        invoice_id: null,
        generate_bill: function() { /** Generate bill **/
            var url = '/api/customer-invoice/'+this.invoice_id+'/generate-bill';
            YSDGui.lockBackground('#bbb');
            var unlock = false;            
            $.ajax({
              type: 'POST',
              url: url,
              contentType: 'application/json; charset=utf-8',
              success: function(data, textStatus, jqXHR) {
                unlock = true;
                YSDGui.unLockBackground();
                invoicesManager.model.synchronizeCurrentEntity(data);
                invoicesManager.model.change_state('entity_updated_successfully');                
                alert('<%=t.invoices.form.bill_generated_successfully%>');
              },
              error: function(data, textStatus, jqXHR) {
                alert('<%=t.invoices.form.bill_generation_error%>');
              },
              complete: function(jqXHT, textStatus) {
                if (!unlock) {
                    YSDGui.unLockBackground();
                }
              }
            });
        },
        send_invoice: function() { /** Generate bill **/
            var url = '/api/customer-invoice/'+this.invoice_id+'/send-invoice';
            YSDGui.lockBackground('#bbb');
            var unlock = false;            
            $.ajax({
              type: 'POST',
              url: url,
              contentType: 'application/json; charset=utf-8',
              success: function(data, textStatus, jqXHR) {
                unlock = true;
                YSDGui.unLockBackground();
                invoicesManager.model.synchronizeCurrentEntity(data);
                invoicesManager.model.change_state('entity_updated_successfully');
                invoicesManagement.view.update('newsfeed_reload');
                alert('<%=t.invoices.form.email_sent_successfully%>');
              },
              error: function(data, textStatus, jqXHR) {
                alert('<%=t.invoices.form.email_sent_error%>');
              },
              complete: function(jqXHT, textStatus) {
                if (!unlock) {
                    YSDGui.unLockBackground();
                }
              }
            });
        },        
      	add_invoice_item: function() { /** Add invoice item **/
            var request = $('form[name=invoice_item_form]').formParams(false);
            if (!($('#item_manual_concept').is(':checked'))) {
              request.concept = $('form[name=invoice_item_form] select[name=concept]').val();
            }
            if ($('#invoice_taxes_included').is(':checked')) {
              request.taxes_included = true;
            }
            else {
              request.taxes_included = false;
            }
            var requestJSON = encodeURIComponent(JSON.stringify(request));
            var url = '/api/customer-invoice/'+this.invoice_id+'/invoice-item';

            YSDGui.lockBackground('#bbb');
            var unlock = false;
            $.ajax({
                type: 'POST',
                url : url,
                data: requestJSON,
                dataType : 'json',
                contentType : 'application/json; charset=utf-8',
                crossDomain: true,
                success: function(data, textStatus, jqXHR) {              	
                	 unlock = true;
                	 YSDGui.unLockBackground();
                	 invoicesManager.model.synchronizeCurrentEntity(data);
                   invoicesManager.model.change_state('entity_updated_successfully');
                	 invoicesManagement.view.update('added_invoice_item');
                },
                error: function(data, textStatus, jqXHR) {
                    alert('<%=t.invoices.form.create_invoice_item_error%>');
                },
                complete: function(jqXHT, textStatus) {
                    if (!unlock) {
                        YSDGui.unLockBackground();
                    }
                }                    
      	  });
        },
      	update_invoice_item: function(invoice_item_id) { /** Update invoice item **/
            var request = $('form[name=invoice_item_form]').formParams(false);
            if (!($('#item_manual_concept').is(':checked'))) {
              request.concept = $('form[name=invoice_item_form] select[name=concept]').val();
            }
            if ($('#invoice_taxes_included').is(':checked')) {
              request.taxes_included = true;
            }
            else {
              request.taxes_included = false;
            }                        
            var requestJSON = encodeURIComponent(JSON.stringify(request));
            var url = '/api/customer-invoice/'+this.invoice_id+'/invoice-item/'+invoice_item_id;

            YSDGui.lockBackground('#bbb');
            var unlock = false;
            $.ajax({
                type: 'PUT',
                url : url,
                data: requestJSON,
                dataType : 'json',
                contentType : 'application/json; charset=utf-8',
                crossDomain: true,
                success: function(data, textStatus, jqXHR) {              	
                	 unlock = true;
                	 YSDGui.unLockBackground();
                	 invoicesManager.model.synchronizeCurrentEntity(data);
                   invoicesManager.model.change_state('entity_updated_successfully');
                	 invoicesManagement.view.update('updated_invoice_item');
                },
                error: function(data, textStatus, jqXHR) {
                    alert('<%=t.invoices.form.update_invoice_item_error%>');
                },
                complete: function(jqXHT, textStatus) {
                    if (!unlock) {
                        YSDGui.unLockBackground();
                    }
                }                    
      	    });
        },
        create_charge: function() { /* Create an invoice charge */
           var formdata = $('form[name="charge"]').formParams(true);
           var json_request = JSON.stringify(formdata);
           $.ajax({
               type: 'POST',
               data : json_request,
               url : '/api/customer-invoice/'+this.invoice.id+'/charge',
               success: function(data, textStatus, jqXHR) {
                 invoicesManager.model.synchronizeCurrentEntity(data);
                 invoicesManager.model.change_state('entity_updated_successfully');
                 alert('<%=t.invoices.form.charges.charge_create_successfully%>');
                 $('#new_charge_modal').modal('hide');
               },
               error: function(data, textStatus, jqXHR) {
                 alert('<%=t.invoices.form.charges.charge_create_error%>');
               }
           });
        },
        remove_charge: function(invoiceId, chargeId) { /* Remove an invoice charge */

          $.ajax({
            type: 'DELETE',
            url : '/api/customer-invoice/'+invoiceId+'/charge/'+chargeId,
            success: function(data, textStatus, jqXHR) {
              invoicesManager.model.synchronizeCurrentEntity(data);
              invoicesManager.model.change_state('entity_updated_successfully');
              alert('<%=t.invoices.form.charges.charge_removed_successfully%>');
            },
            error: function(data, textStatus, jqXHR) {
              alert('<%=t.invoices.form.charges.charge_removed_error%>');
            }
          }); 

        }       
    },

    controller: {

      generateBillButtonClick: function() {
        if ($('#invoice_form').valid()) {
          if (invoicesManagement.model.invoice.items.length == 0) {
            alert('<%=t.invoices.form.generate_bill_no_lines%>');
          }
          else {
            if (confirm('<%=t.invoices.form.confirm_generate_bill%>')) {
              invoicesManagement.model.generate_bill();
            }
          }
        }
      },
      
      sendInvoiceButtonClick: function() {
        invoicesManagement.model.send_invoice();
      },

      selectCustomerListener: function(event) {
        if (event.type == 'customer_selected') {
          if (event && event.data && event.data.id)Â {
            selectCustomerView.hide();
            $("#customer").val(event.data.full_name);
            $("#customer_id").val(event.data.id);
            $('#customer_type').val(event.data.customer_type);
            $('#customer_full_name').val(event.data.full_name);
            $("#customer_document_id").val(event.data.document_id);
            if (event.data.customer_type == 'individual') {
              $('#customer_full_name_container').hide();
              $('#customer_document_id_container').removeClass('col-md-3');
              $('#customer_document_id_container').addClass('col-md-6');
            }
            else {
              $('#customer_full_name_container').show();
              $('#customer_document_id_container').removeClass('col-md-6');
              $('#customer_document_id_container').addClass('col-md-3');                  
            }       
            $('#error_summary').html('');
            $('#error_summary').hide();            
            $('#invoice_form').valid();     
          }
        }
      },

    	selectCustomerButtonClick: function() {
        selectCustomerModel.removeListener('customer_selected', this.selectCustomerListener);
        selectCustomerModel.addListener('customer_selected', this.selectCustomerListener);
        selectCustomerView.show();
    	},

    	newInvoiceLineButtonClick: function(entity) {
    	   var html = tmpl('invoice_item_tmpl')({entity: entity, invoice_item: null});
      	   $('#invoice_line_modal .modal-body').html(html);
      	   $('#invoice_line_modal').on('shown.bs.modal', function() {
             $('#price_without_taxes').autoNumeric('init',{aSep:''});  
      	     $('#create_invoice_item').unbind('click');
  	         $('#create_invoice_item').bind('click', function(){
  	           invoicesManagement.controller.createInvoiceItemButtonClick();
  	       	 });
           });
           invoicesManagement.view.update('invoice_line_shown', null);
           $('#invoice_line_modal').modal('show');
    	},

    	editInvoiceLineButtonClick: function(entity, idx) {
    	   var invoice_item = entity.items[idx]
    	   var html = tmpl('invoice_item_tmpl')({entity: entity, invoice_item: invoice_item});
      	   $('#invoice_line_modal .modal-body').html(html);
      	   $('#invoice_line_modal').on('shown.bs.modal', function() {
             $('#price_without_taxes').autoNumeric('init',{aSep:''});            
      	     $('#update_invoice_item').unbind('click');
  	         $('#update_invoice_item').bind('click', function(){
  	           invoicesManagement.controller.updateInvoiceItemButtonClick(invoice_item.id);
  	       	 });
           });
           invoicesManagement.view.update('invoice_line_shown', invoice_item);
           $('#invoice_line_modal').modal('show');
    	},

    	createInvoiceItemButtonClick: function() {
    		invoicesManagement.model.add_invoice_item();
    	},

    	updateInvoiceItemButtonClick: function(invoice_item_id) {
    		invoicesManagement.model.update_invoice_item(invoice_item_id);
    	},

      prepareFormNewCharge: function(entity) {
        var html = tmpl('new_charge_script', {entity: entity});

        $('#new_charge_modal .modal-body').html(html);
        $('#new_charge_modal').modal('show');

        $('#new_charge_button').unbind('click');
        $('#new_charge_date').datetimepicker(
            {controlType: 'select', showTimezone: false, useLocalTimezone: true, 
             numberOfMonths:1, dateFormat: 'dd/mm/yy'},
            '<%= session[:locale] %>');
        $('#new_charge_date').datetimepicker('setDate', new Date());
        $('#new_charge_amount').autoNumeric('init',{aSep:''});
        $('#new_charge_button').bind('click', function(){
           invoicesManagement.model.create_charge();
        });          
      }

    },

    view: {

        update: function(action, item) {
        	switch (action) {
            case 'invoice_line_shown':
              if (item && item.concept && item.concept.length > 0 && $('form[name=invoice_item_form] select[name=concept]').val()=='') {
                this.textConcept();
              }
              else {
                this.selectConcept();
                $('#item_manual_concept').attr('checked', false);  
              }
              $('#item_manual_concept').bind('change', function(){
                if ($('#item_manual_concept').is(':checked'))Â {
                  invoicesManagement.view.textConcept();
                }
                else {
                  invoicesManagement.view.selectConcept(); 
                }
              });                
              break;
        		case 'added_invoice_item':
        		  $('#invoice_line_modal').modal('hide');
        		  break;
        		case 'updated_invoice_item':
        		  $('#invoice_line_modal').modal('hide');
        		  break;
            case 'newsfeed_reload':
              // Embed activity newsfeed
              $.ajax({url: '/admin/newsfeed/invoicing/'+ invoicesManagement.model.invoice.id, dataType: 'text'}).done(function(html) {
                    var dom = $('<html />').prop('innerHTML', html);
                    $('#newsfeed_container').html(dom.find('body #page_wrapper'));
                    $('head').append(dom.find('script:not([src])'));
              });              
        	}
        },

        setupValidation: function() {

          $('#invoice_form').validate({

              submitHandler: function(form)
              {
                  $('#error_summary').html('');
                  $('#error_summary').hide();
                  return false;
              },

              invalidHandler : function (form, validator) {
                  $('#error_summary').html('<%=t.invoices.form.validations.errors_summary%>');
                  $('#error_summary').show();
              },

              rules : {
                  'serie': {
                      required: '#serie:visible'
                  },
                  'invoice_type': {
                      required: true
                  },
                  'customer': {
                      required: true
                  },
                  'date': {
                      required: true,
                      validDate: true
                  },
                  'payment_method': {
                      required: true
                  },
                  'expected_payment_date': {
                      required: true,
                      validDate: true
                  }                  
              },

              messages : {
                  'serie': {
                      required: '<%=t.invoices.form.validations.serie_required%>',
                  },
                  'invoice_type': {
                      required: '<%=t.invoices.form.validations.invoice_type_required%>',
                  },
                  'customer': {
                      required: '<%=t.invoices.form.validations.customer_required%>',
                  },
                  'date': {
                      required: '<%=t.invoices.form.validations.date_required%>',
                      validDate: '<%=t.invoices.form.validations.date_invalid%>'
                  },
                  'payment_method': {
                      required: '<%=t.invoices.form.validations.payment_method_required%>',
                  },
                  'expected_payment_date': {
                     required: '<%=t.invoices.form.validations.expected_payment_date_required%>',
                      validDate: '<%=t.invoices.form.validations.expected_payment_date_invalid%>'
                  }
              }

          });

        },       

        textConcept: function() {
            $('form[name=invoice_item_form] select[name=concept]').attr('readonly', true);
            $('form[name=invoice_item_form] input[name=concept]').removeAttr('readonly'); 
            $('form[name=invoice_item_form] select[name=concept]').hide();
            $('form[name=invoice_item_form] input[name=concept]').show();
        },
        selectConcept: function() {
            $('form[name=invoice_item_form] input[name=concept]').attr('readonly', true);                  
            $('form[name=invoice_item_form] select[name=concept]').removeAttr('readonly'); 
            $('form[name=invoice_item_form] select[name=concept]').show();
            $('form[name=invoice_item_form] input[name=concept]').hide();
        }        

    }

  };

  var urls = { query_url  : '/api/customer-invoices',
               create_url : '/api/customer-invoice',
               update_url : '/api/customer-invoice',
               delete_url : '/api/customer-invoice',
               get_url    : '/api/customer-invoice'
             };
  
  var hooks = [invoicesHook];
                 
  var invoicesManager = new EntityManagement(urls, 'invoices',
     <%=per_page%>, hooks, {prefix: '/admin/invoices', hold_form_after_action:true});

  
});